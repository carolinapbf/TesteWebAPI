<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.5 on darwin)" generated="20191110 17:51:42.057" rpa="false">
<suite id="s1" name="TesteCiandtApiUser" source="/Users/pedroh/Downloads/Carol/Testes/API/User/TesteCiandtApiUser.robot">
<kw name="Acess API Test" library="ResourceUser" type="setup">
<kw name="Create Session" library="ExtendedRequestsLibrary">
<doc>Create and return a HTTP session object to a server.</doc>
<arguments>
<arg>apiTeste</arg>
<arg>${URL_API}</arg>
</arguments>
<msg timestamp="20191110 17:51:42.302" level="INFO">Creating Session using : alias=apiTeste, url=https://fakerestapi.azurewebsites.net/api/, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20191110 17:51:42.302" endtime="20191110 17:51:42.303"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:42.301" endtime="20191110 17:51:42.303"></status>
</kw>
<test id="s1-t1" name="Scenario 1: Request to list all users (GET)">
<kw name="Given that I make a request to list all the users" library="ResourceUser">
<kw name="Get Request" library="ExtendedRequestsLibrary">
<doc>Send a GET request on the session object found in the cache using the given ``label``.</doc>
<arguments>
<arg>apiTeste</arg>
<arg>Users</arg>
</arguments>
<assign>
<var>${RESPONSE}</var>
</assign>
<msg timestamp="20191110 17:51:43.501" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191110 17:51:42.304" endtime="20191110 17:51:43.501"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${RESPONSE.text}</arg>
</arguments>
<msg timestamp="20191110 17:51:43.501" level="INFO">[{"ID":1,"UserName":"User 1","Password":"Password1"},{"ID":2,"UserName":"User 2","Password":"Password2"},{"ID":3,"UserName":"User 3","Password":"Password3"},{"ID":4,"UserName":"User 4","Password":"Password4"},{"ID":5,"UserName":"User 5","Password":"Password5"},{"ID":6,"UserName":"User 6","Password":"Password6"},{"ID":7,"UserName":"User 7","Password":"Password7"},{"ID":8,"UserName":"User 8","Password":"Password8"},{"ID":9,"UserName":"User 9","Password":"Password9"},{"ID":10,"UserName":"User 10","Password":"Password10"}]</msg>
<status status="PASS" starttime="20191110 17:51:43.501" endtime="20191110 17:51:43.501"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${RESPONSE}</arg>
</arguments>
<msg timestamp="20191110 17:51:43.502" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191110 17:51:43.502" endtime="20191110 17:51:43.502"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:42.304" endtime="20191110 17:51:43.502"></status>
</kw>
<kw name="When checking status code" library="ResourceUser">
<arguments>
<arg>200</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUSCODE_REQUEST}</arg>
</arguments>
<msg timestamp="20191110 17:51:43.503" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191110 17:51:43.503" endtime="20191110 17:51:43.503"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:43.502" endtime="20191110 17:51:43.504"></status>
</kw>
<kw name="And check reason" library="ResourceUser">
<arguments>
<arg>OK</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.reason}</arg>
<arg>${REASON_SOLICITADO}</arg>
</arguments>
<status status="PASS" starttime="20191110 17:51:43.504" endtime="20191110 17:51:43.505"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:43.504" endtime="20191110 17:51:43.505"></status>
</kw>
<kw name="Then verifies that the request returns a list of &quot;10&quot; users" library="ResourceUser">
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>${NUMBER_OF_ENDPOINT}</arg>
</arguments>
<msg timestamp="20191110 17:51:43.507" level="INFO">Length is 10</msg>
<status status="PASS" starttime="20191110 17:51:43.506" endtime="20191110 17:51:43.507"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:43.505" endtime="20191110 17:51:43.507"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:42.303" endtime="20191110 17:51:43.508" critical="yes"></status>
</test>
<test id="s1-t2" name="Scenario 2: Registration of new user (POST)">
<kw name="Given that is made the registration request from a new user" library="ResourceUser">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>content-type=application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20191110 17:51:43.514" level="INFO">${HEADERS} = {'content-type': 'application/json'}</msg>
<status status="PASS" starttime="20191110 17:51:43.511" endtime="20191110 17:51:43.514"></status>
</kw>
<kw name="Post Request" library="ExtendedRequestsLibrary">
<doc>Send a POST request on the session object found in the cache using the given ``label``.</doc>
<arguments>
<arg>apiTeste</arg>
<arg>Users</arg>
<arg>data={"ID": 11,"UserName": "user","Password": "senha"}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${RESPONSE}</var>
</assign>
<msg timestamp="20191110 17:51:43.806" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191110 17:51:43.515" endtime="20191110 17:51:43.806"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${RESPONSE.text}</arg>
</arguments>
<msg timestamp="20191110 17:51:43.807" level="INFO">{"ID":11,"UserName":"user","Password":"senha"}</msg>
<status status="PASS" starttime="20191110 17:51:43.807" endtime="20191110 17:51:43.807"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${RESPONSE}</arg>
</arguments>
<msg timestamp="20191110 17:51:43.808" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191110 17:51:43.807" endtime="20191110 17:51:43.808"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:43.510" endtime="20191110 17:51:43.808"></status>
</kw>
<kw name="When checking status code" library="ResourceUser">
<arguments>
<arg>200</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUSCODE_REQUEST}</arg>
</arguments>
<msg timestamp="20191110 17:51:43.809" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191110 17:51:43.809" endtime="20191110 17:51:43.809"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:43.808" endtime="20191110 17:51:43.809"></status>
</kw>
<kw name="And check reason" library="ResourceUser">
<arguments>
<arg>OK</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.reason}</arg>
<arg>${REASON_SOLICITADO}</arg>
</arguments>
<status status="PASS" starttime="20191110 17:51:43.810" endtime="20191110 17:51:43.811"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:43.810" endtime="20191110 17:51:43.811"></status>
</kw>
<kw name="Then check if the user is with all registered data" library="ResourceUser">
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>ID</arg>
<arg>11</arg>
</arguments>
<status status="PASS" starttime="20191110 17:51:43.812" endtime="20191110 17:51:43.812"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>UserName</arg>
<arg>user</arg>
</arguments>
<status status="PASS" starttime="20191110 17:51:43.812" endtime="20191110 17:51:43.813"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>Password</arg>
<arg>senha</arg>
</arguments>
<status status="PASS" starttime="20191110 17:51:43.813" endtime="20191110 17:51:43.814"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:43.811" endtime="20191110 17:51:43.814"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:43.508" endtime="20191110 17:51:43.814" critical="yes"></status>
</test>
<test id="s1-t3" name="Scenario 3: Delete a user (DELETE)">
<kw name="Given that I delete the user &quot;10&quot;" library="ResourceUser">
<kw name="Delete Request" library="ExtendedRequestsLibrary">
<doc>Send a DELETE request on the session object found in the cache using the given
``label``.</doc>
<arguments>
<arg>apiTeste</arg>
<arg>Users/${ENDPOINT_ID}</arg>
</arguments>
<assign>
<var>${RESPONSE}</var>
</assign>
<msg timestamp="20191110 17:51:44.114" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191110 17:51:43.817" endtime="20191110 17:51:44.114"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${RESPONSE.text}</arg>
</arguments>
<msg timestamp="20191110 17:51:44.114" level="INFO"></msg>
<status status="PASS" starttime="20191110 17:51:44.114" endtime="20191110 17:51:44.114"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${RESPONSE}</arg>
</arguments>
<msg timestamp="20191110 17:51:44.115" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191110 17:51:44.115" endtime="20191110 17:51:44.115"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:43.816" endtime="20191110 17:51:44.115"></status>
</kw>
<kw name="When checking status code" library="ResourceUser">
<arguments>
<arg>200</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUSCODE_REQUEST}</arg>
</arguments>
<msg timestamp="20191110 17:51:44.116" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191110 17:51:44.116" endtime="20191110 17:51:44.116"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:44.115" endtime="20191110 17:51:44.117"></status>
</kw>
<kw name="And check reason" library="ResourceUser">
<arguments>
<arg>OK</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.reason}</arg>
<arg>${REASON_SOLICITADO}</arg>
</arguments>
<status status="PASS" starttime="20191110 17:51:44.117" endtime="20191110 17:51:44.118"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:44.117" endtime="20191110 17:51:44.119"></status>
</kw>
<kw name="Then check if the response body is empty" library="ResourceUser">
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${RESPONSE.content}</arg>
</arguments>
<msg timestamp="20191110 17:51:44.121" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20191110 17:51:44.120" endtime="20191110 17:51:44.121"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:44.119" endtime="20191110 17:51:44.122"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:43.815" endtime="20191110 17:51:44.122" critical="yes"></status>
</test>
<test id="s1-t4" name="Scenario 4 : Request a specific user (GET[ID])">
<kw name="Given that I make a request to return the user &quot;5&quot;" library="ResourceUser">
<kw name="Get Request" library="ExtendedRequestsLibrary">
<doc>Send a GET request on the session object found in the cache using the given ``label``.</doc>
<arguments>
<arg>apiTeste</arg>
<arg>Users/${ENDPOINT_DELETE}</arg>
</arguments>
<assign>
<var>${RESPONSE}</var>
</assign>
<msg timestamp="20191110 17:51:44.352" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191110 17:51:44.125" endtime="20191110 17:51:44.352"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${RESPONSE.text}</arg>
</arguments>
<msg timestamp="20191110 17:51:44.352" level="INFO">{"ID":5,"UserName":"User 5","Password":"Password5"}</msg>
<status status="PASS" starttime="20191110 17:51:44.352" endtime="20191110 17:51:44.353"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${RESPONSE}</arg>
</arguments>
<msg timestamp="20191110 17:51:44.353" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191110 17:51:44.353" endtime="20191110 17:51:44.353"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:44.124" endtime="20191110 17:51:44.353"></status>
</kw>
<kw name="When checking status code" library="ResourceUser">
<arguments>
<arg>200</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUSCODE_REQUEST}</arg>
</arguments>
<msg timestamp="20191110 17:51:44.355" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191110 17:51:44.354" endtime="20191110 17:51:44.355"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:44.354" endtime="20191110 17:51:44.355"></status>
</kw>
<kw name="And check reason" library="ResourceUser">
<arguments>
<arg>OK</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.reason}</arg>
<arg>${REASON_SOLICITADO}</arg>
</arguments>
<status status="PASS" starttime="20191110 17:51:44.356" endtime="20191110 17:51:44.357"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:44.356" endtime="20191110 17:51:44.357"></status>
</kw>
<kw name="Then check if the request returns all data correctly" library="ResourceUser">
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>ID</arg>
<arg>5</arg>
</arguments>
<status status="PASS" starttime="20191110 17:51:44.358" endtime="20191110 17:51:44.359"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>UserName</arg>
<arg>User 5</arg>
</arguments>
<status status="PASS" starttime="20191110 17:51:44.360" endtime="20191110 17:51:44.361"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>Password</arg>
<arg>Password5</arg>
</arguments>
<status status="PASS" starttime="20191110 17:51:44.361" endtime="20191110 17:51:44.362"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:44.358" endtime="20191110 17:51:44.362"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:44.122" endtime="20191110 17:51:44.363" critical="yes"></status>
</test>
<test id="s1-t5" name="Scenario 5: Update or modify user data (PUT)">
<kw name="Given that I only changed the user &quot;1&quot;" library="ResourceUser">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>content-type=application/json</arg>
</arguments>
<assign>
<var>${HEADERS}</var>
</assign>
<msg timestamp="20191110 17:51:44.365" level="INFO">${HEADERS} = {'content-type': 'application/json'}</msg>
<status status="PASS" starttime="20191110 17:51:44.365" endtime="20191110 17:51:44.365"></status>
</kw>
<kw name="Post Request" library="ExtendedRequestsLibrary">
<doc>Send a POST request on the session object found in the cache using the given ``label``.</doc>
<arguments>
<arg>apiTeste</arg>
<arg>Users/${ENDPOINT_PUT}</arg>
<arg>data={"ID": 1,"UserName": "user","Password": "senha"}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${RESPONSE}</var>
</assign>
<msg timestamp="20191110 17:51:44.626" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191110 17:51:44.365" endtime="20191110 17:51:44.626"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${RESPONSE.text}</arg>
</arguments>
<msg timestamp="20191110 17:51:44.626" level="INFO">{"ID":1,"UserName":"user","Password":"senha"}</msg>
<status status="PASS" starttime="20191110 17:51:44.626" endtime="20191110 17:51:44.627"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${RESPONSE}</arg>
</arguments>
<msg timestamp="20191110 17:51:44.627" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20191110 17:51:44.627" endtime="20191110 17:51:44.627"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:44.364" endtime="20191110 17:51:44.627"></status>
</kw>
<kw name="When checking status code" library="ResourceUser">
<arguments>
<arg>200</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.status_code}</arg>
<arg>${STATUSCODE_REQUEST}</arg>
</arguments>
<msg timestamp="20191110 17:51:44.628" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191110 17:51:44.628" endtime="20191110 17:51:44.629"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:44.627" endtime="20191110 17:51:44.629"></status>
</kw>
<kw name="And check reason" library="ResourceUser">
<arguments>
<arg>OK</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${RESPONSE.reason}</arg>
<arg>${REASON_SOLICITADO}</arg>
</arguments>
<status status="PASS" starttime="20191110 17:51:44.630" endtime="20191110 17:51:44.631"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:44.629" endtime="20191110 17:51:44.632"></status>
</kw>
<kw name="Then check if user has been modified correctly" library="ResourceUser">
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>ID</arg>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191110 17:51:44.633" endtime="20191110 17:51:44.634"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>UserName</arg>
<arg>user</arg>
</arguments>
<status status="PASS" starttime="20191110 17:51:44.634" endtime="20191110 17:51:44.635"></status>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<arguments>
<arg>${RESPONSE.json()}</arg>
<arg>Password</arg>
<arg>senha</arg>
</arguments>
<status status="PASS" starttime="20191110 17:51:44.635" endtime="20191110 17:51:44.636"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:44.632" endtime="20191110 17:51:44.637"></status>
</kw>
<status status="PASS" starttime="20191110 17:51:44.363" endtime="20191110 17:51:44.637" critical="yes"></status>
</test>
<doc>Documentacao da API: https://fakerestapi.azurewebsites.net/swagger/ui/index#/Books</doc>
<status status="PASS" starttime="20191110 17:51:42.065" endtime="20191110 17:51:44.639"></status>
</suite>
<statistics>
<total>
<stat pass="5" fail="0">Critical Tests</stat>
<stat pass="5" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="0" id="s1" name="TesteCiandtApiUser">TesteCiandtApiUser</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
